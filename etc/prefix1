#!/bin/bash

declare portFile pidFile ttystate script tmpPipe javaVersion dataHomeDir data stderr
declare -i pid port version buildId stdoutPid stderrPid continue pipePid argCount launchPid payloadSize jarSize
declare -a args signals sttyOptions

# The TTY settings to use for terminal input
sttyOptions=(intr undef -echo icanon raw opost)

# The set of signals which should be captured and forwarded to the JVM process
signals=(INT WINCH TERM)

name="$(basename "$0")"
baseDir="${XDG_RUNTIME_DIR:-$HOME/.local/state}/$name"
dataHomeDir="${XDG_DATA_HOME:-$HOME/.local/share}"
portFile="$baseDir/port"
pidFile="$baseDir/pid"
failFile="$baseDir/fail"
script="$(realpath "$0")"
javaVersion="21"
javaHome="$dataHomeDir/java/$javaVersion"
continue=1

pid=$$
args=("$@")
argCount=$#
payloadSize=0
jarSize=0

backout() {
  logger "backout()"
  if [ -f "$failFile" ]
  then
    logger "failFile exists"
    [ -t 0 ] && stty "$ttystate"
    printf "\nThe %s daemon process failed to start.\n" "$name" >&2
    printf "Remove the file %s before trying again.\n" "$failFile" >&2
    exit 1
  fi
}

abort() {
  logger "abort()"
  touch "$failFile"
}

launch() {
  logger "launch()"
  startTime="$(date +%s%3N)"
  echo "$pid" > "$pidFile"
  [ -x "$javaHome/bin/java" ] || extract
  (nohup "java" -Dethereal.startTime="$startTime" -Dethereal.name="$name" -Dethereal.script="$script" -Dethereal.payloadSize=$payloadSize -Dethereal.jarSize=$jarSize -Dethereal.command="$(command -v "$name")" -Dethereal.fpath="$(zsh -c 'printf "%s\n" $fpath' 2> /dev/null || echo '')" -jar "$script" > /dev/null 2>&1 || abort) &
  launchPid=$!
  
  while [[ ! -s "$portFile" ]] && [[ ! -f "$failFile" ]]
  do
    logger "waiting..."
    sleep 0.05
  done

  backout

  setup
}

setup() {
  logger "setup()"
  data="$(<"$portFile")"
  port=${data%% *}
  data2="${data#* }"
  stderr=${data2#* }
  version=${data2% *}
  buildId=\
