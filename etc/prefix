#!/bin/bash

declare portFile ttystate script tmpPipe javaVersion dataHomeDir data stderr
declare -i pid port version buildId stdoutPid stderrPid continue pipePid argCount launchPid payloadSize jarSize
declare -a args signals sttyOptions

# The TTY settings to use for terminal input
sttyOptions=(intr undef -echo icanon raw opost)

# The set of signals which should be captured and forwarded to the JVM process
signals=(INT WINCH TERM)

name="$(basename "$0")"
baseDir="${XDG_RUNTIME_DIR:-$HOME/.local/state}/$name"
dataHomeDir="${XDG_DATA_HOME:-$HOME/.local/share}"
portFile="$baseDir/port"
pidFile="$baseDir/pid"
failFile="$baseDir/fail"
script="$(realpath "$0")"
javaVersion="21"
javaHome="$dataHomeDir/java/$javaVersion"
continue=1


pid=$$
args=("$@")
argCount=$#
payloadSize=0
jarSize=0

backout() {
  if [ -f "$failFile" ]
  then
    test -t 0 && stty "$ttystate"
    printf "\nThe %s daemon process failed to start.\n" "$name" >&2
    printf "Remove the file %s before trying again.\n" "$failFile" >&2
    exit 1
  fi
}

abort() {
  touch "$failFile"
}

launch() {
  startTime="$(date +%s%3N)"
  test -x "$javaHome/bin/java" || extract
  (nohup "$javaHome/bin/java" -Dethereal.startTime="$startTime" -Dethereal.name="$name" -Dethereal.script="$script" -Dethereal.payloadSize=$payloadSize -Dethereal.jarSize=$jarSize -Dethereal.command="$(command -v "$name")" -Dethereal.fpath="$(zsh -c 'printf "%s\n" $fpath' 2> /dev/null || echo '')" -jar "$script" > /dev/null 2>&1 || abort) &
  launchPid=$!

  while [[ ! -s "$portFile" ]] && [[ ! -f "$failFile" ]]
  do sleep 0.05
  done

  backout
  setup
}

setup() {
  data="$(<"$portFile")"
  port=${data%% *}
  data2="${data#* }"
  stderr=${data2#* }
  version=${data2% *}
  buildId=%%BUILDID%%
}

handle() {
  # shellcheck disable=SC2317
  case "$1" in
    TERM) continue=0 ;;
  esac
  # shellcheck disable=SC2317
  printf "s\n%s\n%s\n" "$pid" "$1" >"/dev/tcp/localhost/$port"
}

extract() {
  local -i offset fileSize
  local dir
  mkdir -p "$dataHomeDir/java"
  fileSize=$(wc -c "$script" | cut -d' ' -f1)
  offset=$((fileSize - jarSize - payloadSize + 1))
  tail -c +"$offset" "$script" | tar xz -C "$dataHomeDir/java" 2> /dev/null
  dir="$(tail -c +"$offset" "$script" | tar tzf - 2> /dev/null | head -n1)"
  mv "$dataHomeDir/java/$dir" "$javaHome"
}

terminate() {
  exec 6<> /dev/tcp/localhost/$port
  printf "x\n%s\n" "$pid" >&6
  exit "$(cat <&6 2> /dev/null || echo '1')"
}

await() {
  local path
  local -i limit count
  path="$1"
  limit=$2
  count=0

  while ! [ -s "$path" ] && [ $count -lt $limit ]
  do
    count+=1
    sleep 0.1
  done
  
  [ -s "$path" ]
}

active() {
  local path
  local -i pid
  path="$1"
  pid="$(<"$pidFile")"
  kill -0 $pid
}

checkState() {
  local -i count
  # Check the consistency of the PID file and Port file
  if active "$pidFile"
  then # Process is active
    if [ -s "$portFile" ]
    then # server is running
      setup
      if [ $version -ne $buildId ]
      then
        rm -f "$pidFile" "$portFile"
        sleep 0.1
      fi
    else # might be starting up
      if ! await "$portFile" 40
      then abort
      fi
    fi
  else rm -f "$pidFile" "$portFile"
  fi
}

test -t 0 && ttystate="$(stty -g)"
mkdir -p "$baseDir"
backout

checkState

[ -s "$portFile" ] || launch
backout

tmpPipe="$(mktemp -u)"
mkfifo -m 600 "$tmpPipe" && exec 3<> "$tmpPipe" && rm "$tmpPipe"
test -t 0 && stty "${sttyOptions[@]}" > /dev/null 2>&1
exec 7<> /dev/tcp/localhost/$port
test -t 0 && printf "i\nt\n" >&7 || printf "i\np\n" >&7
printf "%s\n%s\n" "$pid" "$script" >&7
pwd >&7
printf "%s\n" "$argCount" >&7
printf '%s\0' "${args[@]}" >&7
printf "\n##\n" >&7
env -0 >&7
printf "\n##\n" >&7
cat >&7 <&0 2> /dev/null &
stdoutPid=$!
cat <&7 2> /dev/null &
pipePid=$!

if [ "$stderr" = "1" ]
then
  exec 5<> /dev/tcp/localhost/$port
  printf "e\n%s\n" "$pid" >&5
  cat >&2 <&5 &
  stderrPid=$!
fi

# shellcheck disable=SC2064
for signal in "${signals[@]}"
do trap "handle $signal" "$signal"
done

while [ $continue = 1 ]
do
  wait $pipePid
  kill -0 $pipePid 2> /dev/null || continue=0
done

test -t 0 && stty "$ttystate"
kill $launchPid 2> /dev/null
kill $stdoutPid 2> /dev/null
kill $stderrPid 2> /dev/null
terminate
exit 1

